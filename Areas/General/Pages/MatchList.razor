@page "/matchlist"
@using AdafyBlazorApp.Data
@using System.Collections.ObjectModel
@using AdafyBlazorApp.Models

@inject MatchResultProvider matchResultProvider
@inject NavigationManager navigationManager

<PageTitle>Ottelut</PageTitle>
<h3>Ottelut</h3>

<input type="text" @oninput="UpdateMatchListing" />

@if(loaded)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Päivämäärä</th>
                <th>Kotijoukkue</th>
                <th>VierasJoukkue</th>
                <th>Tulos</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var match in matchObservableList)
            {
                <tr @ondblclick="(e) => MatchSelected(e,match.Id)">
                    <td>@match.MatchDate</td>
                    <td>
                        <img src=@match.HomeTeam.LogoUrl.ReplaceUrlProtocolToSecure()>
                        @match.HomeTeam.Name
                        </td>
                    <td>
                        <img src=@match.AwayTeam.LogoUrl.ReplaceUrlProtocolToSecure()>
                        @match.AwayTeam.Name
                        </td>
                    <td>@match.HomeGoals - @match.AwayGoals</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private const string JSPATH = "./Areas/General/Pages/";

    private bool loaded { get; set; } = false;
    ObservableCollection<Match> matchObservableList { get; set; } = new ObservableCollection<Match>();

    private async Task UpdateMatchListing(ChangeEventArgs e)
    {
        string? filter = e?.Value?.ToString();
        matchObservableList = new ObservableCollection<Match>(await GetMatchesFromServer(filter));
    }

    private Task MatchSelected(MouseEventArgs e, int matchID)
    {
        navigationManager.NavigateTo("/matchdetails/" + matchID);
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        matchObservableList = new ObservableCollection<Match>(await GetMatchesFromServer(""));
        loaded = true;
    }

    private async Task<Match[]> GetMatchesFromServer(string? filter)
    {
        var matchList = await matchResultProvider.GetMatchResultFromServer();
        if (!string.IsNullOrEmpty(filter))
            matchList = matchList.Where(x => 
                x.HomeTeam.Name.ToLower().StartsWith(filter.ToLower()) || 
                x.AwayTeam.Name.ToLower().StartsWith(filter.ToLower())).ToArray();

        matchList = matchList.OrderByDescending(x => x.MatchDate).ToArray();

        return matchList;
    }
}
